# Generated by Django 2.2.4 on 2020-02-20 13:19

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='mal2CounterfeitersDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='Enter url of the reviewing online shop', null=True, verbose_name='URL')),
                ('domain_is_plausible', models.BooleanField(default=False, help_text='Does the domain fit for the advertised products?', verbose_name='Domainname plausible')),
                ('has_discount', models.BooleanField(default=False, help_text='Do all products have a discount?', verbose_name='Discount')),
                ('no_ssl', models.BooleanField(default=False, help_text='Check if no https', verbose_name='No SSL')),
                ('has_currency_selection', models.BooleanField(default=False, help_text='Is a wide variety of currency options offered?', verbose_name='Currency selection')),
                ('domain_is_counterfeiter', models.BooleanField(default=False, help_text='Do not tick if no or uncertain assessment.<br><strong>There are more checks necessary if not checked!</strong>', verbose_name='Domain: is counterfeiter')),
                ('products_in_stock', models.BooleanField(default=False, help_text='Are <strong> all </strong> in stock?', verbose_name='Products in stock')),
                ('no_product_description', models.BooleanField(default=False, help_text='Only product title no description?', verbose_name='No product description')),
                ('contact_url', models.URLField(blank=True, help_text='Url of the contact or term and conditions url', null=True, verbose_name='Contact url')),
                ('has_contact_mail', models.BooleanField(default=False, help_text='Mail address from an standard provider or no mail at all? (Gmail, Yahoo, hotmail etc.', verbose_name='Contact mail address')),
                ('has_no_imprint', models.BooleanField(default=False, help_text='No imprint url only a contact form', verbose_name='No imprint url')),
                ('terms_and_conditions_of_contract_url', models.URLField(blank=True, help_text='URL to the terms and conditions', null=True, verbose_name='Terms and conditions of contract')),
                ('has_no_terms_and_conditions', models.BooleanField(default=False, help_text='bad translation, foreign language, no terms and conditions content', verbose_name='no terms and conditions')),
                ('imprint', models.URLField(blank=True, help_text='Enter the URL of the imprint', null=True, verbose_name='Imprint')),
                ('imprint_is_counterfeiter', models.BooleanField(default=False, help_text='Do not tick if no or uncertain assessment.<br><strong>There are more checks necessary if not checked!</strong>', verbose_name='Imprint: is counterfeiter')),
                ('switching_language', models.BooleanField(default=False, help_text='Language is changing between the sites of the homepage', verbose_name='Switching language')),
                ('language_is_counterfeiter', models.BooleanField(default=False, help_text='Do not tick if no or uncertain assessment.<br><strong>There are more checks necessary if not checked!</strong>', verbose_name='Imprint: is counterfeiter')),
            ],
            options={
                'verbose_name_plural': 'Counterfeits DBS',
                'verbose_name': 'Counterfeits DB',
            },
        ),
        migrations.CreateModel(
            name='mal2FakeShopDB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='Enter url of the reviewing online shop', null=True, verbose_name='URL')),
                ('is_fake', models.BooleanField(default=False, help_text='Do not tick if no or uncertain assessment.<br><strong>There are more checks necessary if not checked!</strong>', verbose_name='Assessment: is certainly a fake shop?')),
                ('imprint', models.URLField(blank=True, help_text='Enter the URL of the imprint', null=True, verbose_name='Imprint')),
                ('search_term', models.CharField(help_text='Entered search term on google.at', max_length=2000, null=True, verbose_name='Search term')),
                ('suspected_fraud_search', models.BooleanField(default=False, help_text='Do not tick if there is no or uncertain <strong>suspicion of fraud</strong>', verbose_name='Suspected fraud (search)')),
                ('product_name', models.CharField(help_text='Enter the name of the product', max_length=2000, null=True, verbose_name='Name')),
                ('product_url', models.URLField(blank=True, help_text='Enter the URL of the product page', null=True, verbose_name='Product page')),
                ('product_reason', models.CharField(blank=True, help_text='Reason of the product selection eg. offer, sale, ...', max_length=2000, null=True, verbose_name='Reason of product selection')),
                ('price_comparison_geizhals_eu_url', models.URLField(blank=True, help_text='Enter the URL of the geizhals.eu search', null=True, verbose_name='Price comparison on geizhals.eu')),
                ('price_comparison_reason', models.CharField(blank=True, help_text='Short explanation why the price is suspicious', max_length=2000, null=True, verbose_name='Reason of suspected fraud')),
                ('suspected_fraud_price_comparison', models.BooleanField(default=False, help_text='Do not tick if there is no or uncertain <strong>suspicion of fraud</strong>', verbose_name='Suspected fraud (price comparison)')),
                ('terms_of_payment_url', models.URLField(blank=True, help_text='Enter the URL of the terms of payment', null=True, verbose_name='Terms of payment')),
                ('checkout_page_address_url', models.URLField(blank=True, help_text='Enter the URL of the checkout page', null=True, verbose_name='Checkout page (address)')),
                ('checkout_page_payment_method_url', models.URLField(blank=True, help_text='Enter the URL of the payment method selection', null=True, verbose_name='Checkout page (payment method)')),
                ('payment_method_assessment', models.URLField(blank=True, help_text='Enter assessment of payment method', null=True, verbose_name='Assessment of the payment method')),
                ('suspected_fraud_payment_method', models.BooleanField(default=False, help_text='Do not tick if there is no or uncertain <strong>suspicion of fraud</strong>', verbose_name='Suspected fraud (payment method)')),
                ('database_search_term', models.CharField(blank=True, help_text='Used search term in the databases', max_length=2000, null=True, verbose_name='Search term')),
                ('is_wko_checked', models.BooleanField(default=False, help_text='Database: <a href="https://firmen.wko.at" target="_blank">firmen.wko.at</a>', verbose_name='WKO checked')),
                ('is_handelsregister_de_checked', models.BooleanField(default=False, help_text='Database: <a href="https://www.handelsregister.de/rp_web/search.do" target="_blank">www.handelsregister.de</a>', verbose_name='handelsregister.de checked')),
                ('is_justice_europe_checked', models.BooleanField(default=False, help_text='Database: <a href="https://e-justice.europa.eu/content_find_a_company-489-de.do?clang=de" target="_blank">e-justice.europa.eu</a>', verbose_name='justice.europa.eu checked')),
                ('database_review_result', models.CharField(blank=True, help_text='Enter assessment for company inquiry', max_length=2000, null=True, verbose_name='Result of the review')),
                ('suspected_fraud_company_data', models.BooleanField(default=False, help_text='Do not tick if there is no or uncertain <strong>suspicion of fraud</strong>', verbose_name='Suspected fraud (company data)')),
                ('vat', models.CharField(blank=True, help_text='Check VAT on <a href="https://ec.europa.eu/taxation_customs/vies/vatRequest.html" target="_blank">ec.europa.eu</a>', max_length=2000, null=True, verbose_name='VAT')),
                ('vat_review_result', models.CharField(blank=True, help_text='Enter assessment for VAT review', max_length=2000, null=True, verbose_name='Result of the VAT review')),
                ('suspected_fraud_vat', models.BooleanField(default=False, help_text='Do not tick if there is no or uncertain <strong>suspicion of fraud</strong>', verbose_name='Suspected fraud (VAT)')),
                ('domain_whois_url', models.URLField(blank=True, help_text='Enter URL of the domain query e.g. <a href="https://www.whois.com/whois" target="_blank">www.whois.com/whois</a>', null=True, verbose_name='Domain WHOIS')),
                ('domain_registration_check', models.BooleanField(default=False, verbose_name='Date of domain registration is less than a month')),
                ('domain_registration_contradiction_url', models.URLField(blank=True, help_text='URL of the website if a founding date was specified that does not match the domain registration', null=True, verbose_name='Contradiction with information on the website')),
                ('domain_registrar', models.BooleanField(default=False, help_text='Check if the anonymization service / entry is not suitable for the imprint', verbose_name='Domain registrar')),
                ('suspected_fraud_domain', models.BooleanField(default=False, help_text='Do not tick if there is no or uncertain <strong>suspicion of fraud</strong>', verbose_name='Suspected fraud (domain)')),
                ('domain_is_fake', models.BooleanField(default=False, help_text='Do not tick if no or uncertain assessment.<br><strong>There are more checks necessary if not checked!</strong>', verbose_name='Assessment: is certainly a fake shop?')),
                ('different_company_names', models.BooleanField(default=False, help_text='If different company names exist, there is a suspicion of fraud', verbose_name='Specify different company names')),
                ('can_not_copy_website_images', models.BooleanField(default=False, help_text='If not copyable then there is a suspicion of fraud', verbose_name='Can not copy images on web page')),
                ('copied_website_images', models.BooleanField(default=False, help_text='Apply reverse image search on: <a href="https://www.google.at/imghp?hl=detab" target="_blank">www.google.at/imghp</a>', verbose_name='Image copied from other website')),
                ('suspected_fraud_images', models.BooleanField(default=False, help_text='Do not tick if there is no or uncertain <strong>suspicion of fraud</strong>', verbose_name='Suspected fraud (images)')),
                ('can_not_copy_website_text', models.BooleanField(default=False, help_text='If not copyable then there is a suspicion of fraud', verbose_name='Can not copy text on web page')),
                ('checked_website_text_url', models.URLField(blank=True, help_text='URL of the checked website text', null=True, verbose_name='Website text')),
                ('website_text_example', models.TextField(blank=True, help_text='Enter text section and search on <a href="https://www.google.at" target="_blank">www.google.at</a>', max_length=2000, null=True, verbose_name='Text clipping')),
                ('suspected_fraud_website_text', models.BooleanField(default=False, help_text='Do not tick if there is no or uncertain <strong>suspicion of fraud</strong>', verbose_name='Suspected fraud (website text)')),
                ('changing_languages_available', models.BooleanField(default=False, help_text='If changing languages exist, there is a suspicion of fraud', verbose_name='Changing languages available')),
                ('terms_and_conditions_of_contract_url', models.URLField(blank=True, help_text='URL to the terms and conditions', null=True, verbose_name='Terms and conditions of contract')),
                ('very_short_terms', models.BooleanField(default=False, help_text='If very short terms exist, there is a suspicion of fraud', verbose_name='Very short terms')),
                ('suspected_fraud_quality_mark_seal', models.BooleanField(default=False, help_text='Do not tick if there is no or uncertain <strong>suspicion of fraud</strong>', verbose_name='Suspected fraud (quality mark)')),
                ('quality_mark_url', models.URLField(blank=True, help_text='URL of the used quality mark', null=True, verbose_name='Quality mark image')),
                ('is_guetezeichen_at_checked', models.BooleanField(default=False, help_text='Database: <a href="https://www.guetezeichen.at/zertifizierte-websites/guetezeichen/" target="_blank">www.guetezeichen.at</a>', verbose_name='guetezeichen.at checked')),
                ('is_ehi_seal_checked', models.BooleanField(default=False, help_text='Database: <a href="https://www.ehi-siegel.de/verbraucher/shops-mit-siegel/shops-zertifiziert/es/Shop///2" target="_blank">www.ehi-siegel.de</a>', verbose_name='EHI-seal checked')),
                ('is_trusted_shops_checked', models.BooleanField(default=False, help_text='Database: <a href="https://www.trustedshops.de" target="_blank">www.trustedshops.de</a>', verbose_name='Trusted shops checked')),
                ('is_fictitious_quality_marks', models.BooleanField(default=False, help_text='If invented quality marks are available, there is a suspicion of fraud', verbose_name='Fictitious quality marks available')),
                ('fictitious_quality_mark_url', models.URLField(blank=True, help_text='URL of the used fictitious quality mark', null=True, verbose_name='Fictitious quality mark')),
                ('further_review_is_fake', models.BooleanField(default=False, help_text='Do not tick if no or uncertain assessment.<br><strong>There are more checks necessary if not checked!</strong>', verbose_name='Assessment: is certainly a fake shop?')),
            ],
            options={
                'verbose_name_plural': 'Fake shops',
                'verbose_name': 'Fake shop',
            },
        ),
        migrations.CreateModel(
            name='WebsiteText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('website_text_url', models.CharField(blank=True, help_text='URL of the checked text', max_length=2000, null=True, verbose_name='URL')),
                ('mal2_db', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mal2_db.mal2FakeShopDB')),
            ],
            options={
                'verbose_name_plural': 'Enter URLs that have the same website text',
                'verbose_name': 'Website text',
            },
        ),
        migrations.CreateModel(
            name='WebsiteImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.URLField(blank=True, null=True, verbose_name='URL')),
                ('mal2_db', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mal2_db.mal2FakeShopDB')),
            ],
            options={
                'verbose_name_plural': 'Enter URLs for website images',
                'verbose_name': 'Website image',
            },
        ),
        migrations.CreateModel(
            name='SearchResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_url', models.URLField(blank=True, null=True, verbose_name='URL')),
                ('mal2_db', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mal2_db.mal2FakeShopDB')),
            ],
            options={
                'verbose_name_plural': 'Search results',
                'verbose_name': 'Search result',
            },
        ),
        migrations.CreateModel(
            name='ProductExample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_example_url', models.CharField(blank=True, max_length=2000, null=True, verbose_name='URL')),
                ('mal2_counterfeiter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mal2_db.mal2CounterfeitersDB')),
            ],
            options={
                'verbose_name_plural': 'Enter URLs for product examples',
                'verbose_name': 'Product example',
            },
        ),
        migrations.CreateModel(
            name='LanguageUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_url', models.CharField(blank=True, max_length=2000, null=True, verbose_name='URL')),
                ('mal2_counterfeiter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mal2_db.mal2CounterfeitersDB')),
            ],
            options={
                'verbose_name_plural': 'Enter URLs for language examples',
                'verbose_name': 'Language url',
            },
        ),
        migrations.CreateModel(
            name='LanguageExample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_example_url', models.CharField(blank=True, max_length=2000, null=True, verbose_name='URL')),
                ('mal2_db', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mal2_db.mal2FakeShopDB')),
            ],
            options={
                'verbose_name_plural': 'Enter URLs for language examples',
                'verbose_name': 'Language example',
            },
        ),
        migrations.CreateModel(
            name='CompanyName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name_url', models.URLField(blank=True, null=True, verbose_name='URL')),
                ('mal2_db', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mal2_db.mal2FakeShopDB')),
            ],
            options={
                'verbose_name_plural': 'Enter URLs for company names',
                'verbose_name': 'Company name',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
